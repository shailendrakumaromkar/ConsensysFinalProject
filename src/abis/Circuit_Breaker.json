{
  "contractName": "Circuit_Breaker",
  "abi": [
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Declaring owner of smart contract\"},\"paused()\":{\"notice\":\"Flag use for circuit-breaker  \"},\"togglePause()\":{\"notice\":\"Pause the contract in case of emergency.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Circuit_Breaker.sol\":\"Circuit_Breaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Circuit_Breaker.sol\":{\"keccak256\":\"0x0e42bc185059faf6ef80d96264a3b2a694c3ea367e06ebb6e2aaf7de158558ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6374415ae45be9079e5e8f593cddfb239c6585099983f30faae92e9460e016f\",\"dweb:/ipfs/QmVJSKX3UgSGvjiA1eXbcqwBCBhR8hxwSj39Y7GcbSCuUY\"]},\"/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Owner.sol\":{\"keccak256\":\"0x9f92c5cc78fcdb08c2f03adfdde2dff85e5ef7f3e8030c5bc74236e1c1ab1389\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f91d64c0d0fe0fb2e75bc54f233e79b9e32bc2f29a1d3bf589ede0a6f7b8ccc4\",\"dweb:/ipfs/QmUBNR3qudwTsTxcrFNyugLpZ7ao6qhXzTujaCiiuf9s8P\"]}},\"version\":1}",
  "bytecode": "0x608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b506102208061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635c975abb146100465780638da5cb5b14610066578063c4ae31681461009a575b600080fd5b61004e6100ba565b60405180821515815260200191505060405180910390f35b61006e6100cd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100a26100f1565b60405180821515815260200191505060405180910390f35b600060149054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610198576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806101ca6021913960400191505060405180910390fd5b600060149054906101000a900460ff1615600060146101000a81548160ff021916908315150217905550600190509056fe4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6ea26469706673582212201586d80e255be32acbcf25bd7c05d461a332d0189b30f08405b58e4fcecbb36864736f6c63430007000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80635c975abb146100465780638da5cb5b14610066578063c4ae31681461009a575b600080fd5b61004e6100ba565b60405180821515815260200191505060405180910390f35b61006e6100cd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100a26100f1565b60405180821515815260200191505060405180910390f35b600060149054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610198576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806101ca6021913960400191505060405180910390fd5b600060149054906101000a900460ff1615600060146101000a81548160ff021916908315150217905550600190509056fe4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6ea26469706673582212201586d80e255be32acbcf25bd7c05d461a332d0189b30f08405b58e4fcecbb36864736f6c63430007000033",
  "immutableReferences": {},
  "sourceMap": "86:433:0:-:0;;;183:5;162:26;;;;;;;;;;;;;;;;;;;;86:433;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "86:433:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;162:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;126:28:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;405:109:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;162:26;;;;;;;;;;;;;:::o;126:28:4:-;;;;;;;;;;;;:::o;405:109:0:-;452:4;245:5:4;;;;;;;;;;;231:19;;:10;:19;;;223:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;478:6:0::1;;;;;;;;;;;477:7;468:6;;:16;;;;;;;;;;;;;;;;;;502:4;495:11;;405:109:::0;:::o",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.0;\r\n\r\nimport \"./Owner.sol\";\r\n\r\ncontract Circuit_Breaker is Owner {\r\n\r\n///Flag use for circuit-breaker  \r\n  bool public paused = false;\r\n\r\n///Modifier to Check contract is Paused\r\nmodifier notPaused {\r\n        require(paused == false,\"This Contract is Paused by Admin\");\r\n        _;\r\n    }\r\n\r\n/// @notice Pause the contract in case of emergency.\r\n    function togglePause() public isAdmin returns (bool){\r\n        paused = !paused;\r\n        return true;\r\n    }\r\n\r\n}",
  "sourcePath": "C:\\Users\\Neha\\Desktop\\Omkar\\Blockchain\\ConsensysFinalProject\\Marketplace\\src\\contracts\\Circuit_Breaker.sol",
  "ast": {
    "absolutePath": "/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Circuit_Breaker.sol",
    "exportedSymbols": {
      "Circuit_Breaker": [
        37
      ]
    },
    "id": 38,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:22:0"
      },
      {
        "absolutePath": "/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Owner.sol",
        "file": "./Owner.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 38,
        "sourceUnit": 334,
        "src": "61:21:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "Owner",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 333,
              "src": "114:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Owner_$333",
                "typeString": "contract Owner"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "114:5:0"
          }
        ],
        "contractDependencies": [
          333
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 37,
        "linearizedBaseContracts": [
          37,
          333
        ],
        "name": "Circuit_Breaker",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 5,
              "nodeType": "StructuredDocumentation",
              "src": "125:33:0",
              "text": "Flag use for circuit-breaker  "
            },
            "functionSelector": "5c975abb",
            "id": 8,
            "mutability": "mutable",
            "name": "paused",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 37,
            "src": "162:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 6,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "162:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "66616c7365",
              "id": 7,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "183:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 19,
              "nodeType": "Block",
              "src": "253:90:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 14,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 12,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "272:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 13,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "282:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "272:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5468697320436f6e7472616374206973205061757365642062792041646d696e",
                        "id": 15,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "288:34:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da50c0352e50e64617ef31ca88fdb70315279bc8121d55e2ad69bbd270651b2a",
                          "typeString": "literal_string \"This Contract is Paused by Admin\""
                        },
                        "value": "This Contract is Paused by Admin"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da50c0352e50e64617ef31ca88fdb70315279bc8121d55e2ad69bbd270651b2a",
                          "typeString": "literal_string \"This Contract is Paused by Admin\""
                        }
                      ],
                      "id": 11,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "264:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "264:59:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17,
                  "nodeType": "ExpressionStatement",
                  "src": "264:59:0"
                },
                {
                  "id": 18,
                  "nodeType": "PlaceholderStatement",
                  "src": "334:1:0"
                }
              ]
            },
            "documentation": {
              "id": 9,
              "nodeType": "StructuredDocumentation",
              "src": "193:41:0",
              "text": "Modifier to Check contract is Paused"
            },
            "id": 20,
            "name": "notPaused",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "253:0:0"
            },
            "src": "234:109:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "457:57:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 28,
                      "name": "paused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "468:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 30,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "477:7:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 29,
                        "name": "paused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "478:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "468:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "468:16:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "502:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 27,
                  "id": 34,
                  "nodeType": "Return",
                  "src": "495:11:0"
                }
              ]
            },
            "documentation": {
              "id": 21,
              "nodeType": "StructuredDocumentation",
              "src": "347:52:0",
              "text": "@notice Pause the contract in case of emergency."
            },
            "functionSelector": "c4ae3168",
            "id": 36,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 24,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 23,
                  "name": "isAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 332,
                  "src": "435:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "435:7:0"
              }
            ],
            "name": "togglePause",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "425:2:0"
            },
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 36,
                  "src": "452:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "452:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "451:6:0"
            },
            "scope": 37,
            "src": "405:109:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 38,
        "src": "86:433:0"
      }
    ],
    "src": "35:484:0"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Circuit_Breaker.sol",
    "exportedSymbols": {
      "Circuit_Breaker": [
        37
      ]
    },
    "id": 38,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:22:0"
      },
      {
        "absolutePath": "/C/Users/Neha/Desktop/Omkar/Blockchain/ConsensysFinalProject/Marketplace/src/contracts/Owner.sol",
        "file": "./Owner.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 38,
        "sourceUnit": 334,
        "src": "61:21:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "Owner",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 333,
              "src": "114:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Owner_$333",
                "typeString": "contract Owner"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "114:5:0"
          }
        ],
        "contractDependencies": [
          333
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 37,
        "linearizedBaseContracts": [
          37,
          333
        ],
        "name": "Circuit_Breaker",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 5,
              "nodeType": "StructuredDocumentation",
              "src": "125:33:0",
              "text": "Flag use for circuit-breaker  "
            },
            "functionSelector": "5c975abb",
            "id": 8,
            "mutability": "mutable",
            "name": "paused",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 37,
            "src": "162:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 6,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "162:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "66616c7365",
              "id": 7,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "183:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 19,
              "nodeType": "Block",
              "src": "253:90:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 14,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 12,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "272:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 13,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "282:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "272:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5468697320436f6e7472616374206973205061757365642062792041646d696e",
                        "id": 15,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "288:34:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da50c0352e50e64617ef31ca88fdb70315279bc8121d55e2ad69bbd270651b2a",
                          "typeString": "literal_string \"This Contract is Paused by Admin\""
                        },
                        "value": "This Contract is Paused by Admin"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da50c0352e50e64617ef31ca88fdb70315279bc8121d55e2ad69bbd270651b2a",
                          "typeString": "literal_string \"This Contract is Paused by Admin\""
                        }
                      ],
                      "id": 11,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "264:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "264:59:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17,
                  "nodeType": "ExpressionStatement",
                  "src": "264:59:0"
                },
                {
                  "id": 18,
                  "nodeType": "PlaceholderStatement",
                  "src": "334:1:0"
                }
              ]
            },
            "documentation": {
              "id": 9,
              "nodeType": "StructuredDocumentation",
              "src": "193:41:0",
              "text": "Modifier to Check contract is Paused"
            },
            "id": 20,
            "name": "notPaused",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "253:0:0"
            },
            "src": "234:109:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "457:57:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 28,
                      "name": "paused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "468:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 30,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "477:7:0",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 29,
                        "name": "paused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "478:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "468:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "468:16:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "502:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 27,
                  "id": 34,
                  "nodeType": "Return",
                  "src": "495:11:0"
                }
              ]
            },
            "documentation": {
              "id": 21,
              "nodeType": "StructuredDocumentation",
              "src": "347:52:0",
              "text": "@notice Pause the contract in case of emergency."
            },
            "functionSelector": "c4ae3168",
            "id": 36,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 24,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 23,
                  "name": "isAdmin",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 332,
                  "src": "435:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "435:7:0"
              }
            ],
            "name": "togglePause",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "425:2:0"
            },
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 36,
                  "src": "452:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "452:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "451:6:0"
            },
            "scope": 37,
            "src": "405:109:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 38,
        "src": "86:433:0"
      }
    ],
    "src": "35:484:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.0+commit.9e61f92b.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.5",
  "updatedAt": "2020-12-13T23:37:01.222Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Declaring owner of smart contract"
      },
      "paused()": {
        "notice": "Flag use for circuit-breaker  "
      },
      "togglePause()": {
        "notice": "Pause the contract in case of emergency."
      }
    },
    "version": 1
  }
}